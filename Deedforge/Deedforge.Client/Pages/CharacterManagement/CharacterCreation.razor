@page "/character-creation"
@using Deedforge.Shared.Compendium

<PageTitle>
    Core Rules - Character Creation
</PageTitle>

<h1>Character Creation</h1>

<br />

<div style="display: flex;">

    <MudGrid Justify="Justify.SpaceBetween">
        <MudItem xs="3" Style="height: 100%; flex: 1; display: flex; flex-direction: column;">

            <MudPaper Style="display: flex; flex-direction: column; height: 100%;" Class="px-4 py-4 my-4">
                <MudGrid Style="display: flex; flex-direction: column; height: 100%; justify-content: space-between;">
                    <MudItem xs="12" Style="flex: 1; display: flex; flex-direction: column;">
                        <MudText Typo="Typo.body1"><b>ARMOR & SHIELD TRAINING</b></MudText>
                        <MudText Typo="Typo.body2">- WiP</MudText>
                    </MudItem>
                    <MudItem xs="12" Style="flex: 0 0 auto;">
                        <MudDivider Style="margin: 10px 0;" />
                    </MudItem>
                    <MudItem xs="12" Style="flex: 1; display: flex; flex-direction: column;">
                        <MudText Typo="Typo.body1"><b>FIGHTING STYLES & SPELL TRADITIONS</b></MudText>
                        <MudText Typo="Typo.body2">- WiP</MudText>
                    </MudItem>
                    <MudItem xs="12" Style="flex: 0 0 auto;">
                        <MudDivider Style="margin: 10px 0;" />
                    </MudItem>
                    <MudItem xs="12" Style="flex: 1; display: flex; flex-direction: column;">
                        <MudText Typo="Typo.body1"><b>SENSES</b></MudText>
                        <MudText Typo="Typo.body2">- WiP</MudText>
                    </MudItem>
                    <MudItem xs="12" Style="flex: 0 0 auto;">
                        <MudDivider Style="margin: 10px 0;" />
                    </MudItem>
                    <MudItem xs="12" Style="flex: 1; display: flex; flex-direction: column;">
                        <MudText Typo="Typo.body1"><b>KNOWLEDGE</b></MudText>
                        <MudText Typo="Typo.body2">- WiP</MudText>
                    </MudItem>
                </MudGrid>
            </MudPaper>

        </MudItem>

        <MudItem xs="6" Style="height: 100%; flex: 1; display: flex; flex-direction: column;">

            <MudCard Style="height:120px;" Class="mt-4">
                <MudCardContent Class="d-flex flex-column align-left justify-center mud-width-full py-8">
                    <MudText Typo="Typo.h5">Name Placeholder</MudText>
                    <br />
                    <MudGrid Justify="Justify.SpaceBetween">
                        <MudItem xs="4">
                            <MudText Typo="Typo.h6" Align="Align.Center">Profession</MudText>
                        </MudItem>
                        <MudItem xs="4">
                            <MudText Typo="Typo.h6" Align="Align.Center">Ancestry</MudText>
                        </MudItem>
                        <MudItem xs="4">
                            <MudText Typo="Typo.h6" Align="Align.Center">Culture</MudText>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>

            <!-- <MudItem xs="6" Class="d-flex flex-column align-center justify-center mud-width-full py-8"> -->
            <MudImage Src="https://i.redd.it/uu7edj0kiw3b1.jpg" Fluid="true" Alt="Token" Elevation="25" Class="my-2" />

            <MudPaper Class="pa-4 my-2" Elevation="3" Style="background-color: #333;">
                <MudGrid>
                    <MudItem xs="12">
                        <div class="d-flex justify-space-between mb-2">
                            <MudText Typo="Typo.h6" Color="Color.Surface">HP</MudText>
                            <MudText Typo="Typo.h6" Color="Color.Surface">@Health/10</MudText>
                        </div>
                    </MudItem>
                    <MudItem xs="12">
                        <div class="d-flex justify-center">
                            @for (int i = 0; i < 10; i++)
                            {
                                int index = i;
                                <div class="mx-1 heart-container" @onclick="() => HandleHeartClick(index)">
                                    @if (i < Health)
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.Favorite" Color="Color.Error" Size="Size.Large"
                                            Class="heart-icon" />
                                    }
                                    else
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.HeartBroken" Color="Color.Default"
                                            Size="Size.Large" Class="heart-icon grey-heart" />
                                    }
                                </div>
                            }
                        </div>
                    </MudItem>
                </MudGrid>
            </MudPaper>

            <MudGrid Justify="Justify.SpaceBetween" Spacing="2" Class="my-4">
                <MudItem xs="4">
                    <MudCard Style="min-height: 150px; height: 100%;">
                        <MudCardContent>
                            <MudText Typo="Typo.body1">Boons</MudText>
                            <MudDivider Style="margin: 10px 0;" />
                            <MudText Typo="Typo.body2">- WiP</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="4">
                    <MudCard Style="min-height: 150px; height: 100%;">
                        <MudCardContent>
                            <MudText Typo="Typo.body1">Conditions</MudText>
                            <MudDivider Style="margin: 10px 0;" />
                            <MudText Typo="Typo.body2">- WiP</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="4">
                    <MudCard Style="min-height: 150px; height: 100%;">
                        <MudCardContent>
                            <MudText Typo="Typo.body1">Wounds</MudText>
                            <MudDivider Style="margin: 10px 0;" />
                            <MudText Typo="Typo.body2">- WiP</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>

            <MudGrid Justify="Justify.SpaceBetween" Spacing="2" Class="mt-2 mb-4" Style="flex-grow: 1;">
                <MudItem xs="6">
                    <MudCard Style="min-height: 100px; height: 100%;">
                        <MudCardContent>
                            <MudText Typo="Typo.body1">Resistances</MudText>
                            <MudDivider Style="margin: 10px 0;" />
                            <MudText Typo="Typo.body2">- WiP</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="6">
                    <MudCard Style="min-height: 100px; height: 100%;">
                        <MudCardContent>
                            <MudText Typo="Typo.body1">Vulnerabilities</MudText>
                            <MudDivider Style="margin: 10px 0;" />
                            <MudText Typo="Typo.body2">- WiP</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>

        </MudItem>

        <MudItem xs="3" Style="height: 100%; flex: 1; display: flex; flex-direction: column;">

            <MudCard Style="min-height: 100px; flex-grow: 1;" Class="my-4">
                <MudCardContent>
                    <MudText Typo="Typo.h6">Skills</MudText>
                    <MudDivider Style="margin: 10px 0;" />
                    <MudText Typo="Typo.body2">- WiP</MudText>
                </MudCardContent>
            </MudCard>

        </MudItem>
    </MudGrid>

</div>

<MudTabs Elevation="2" ApplyEffectsToContainer="true" Centered="true" MinimumTabWidth="120px">
    <MudTabPanel Text="Inventory">
        <MudText>Content Disabled</MudText>
    </MudTabPanel>
    <MudTabPanel Text="Features">
        <MudText>Content Two</MudText>
    </MudTabPanel>
    <MudTabPanel Text="Traits">
        <MudText>Content Three</MudText>
    </MudTabPanel>
    <MudTabPanel Text="Deeds">
        <MudText>Content Disabled</MudText>
    </MudTabPanel>
</MudTabs>

@code {
    [Parameter]
    public int MaxHealth { get; set; } = 10;

    [Parameter]
    public int Health { get; set; } = 10;

    [Parameter]
    public EventCallback<int> HealthChanged { get; set; }

    private bool _animating = false;

    // Animation state
    private int _displayHealth;
    private int _targetHealth;
    public required IJSRuntime JS { get; set; }
    
    [Inject]
    public required IJSRuntime JSRuntime { get; set; }
    
    private DotNetObjectReference<CharacterCreation>? _dotnetRef;

    protected override void OnInitialized()
    {
        _displayHealth = Health;
        _targetHealth = Health;
        JS = JSRuntime;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Create reference only once
            _dotnetRef = DotNetObjectReference.Create(this);
        }
    }

    private async Task SetHealth(int newHealth, bool animate)
    {
        if (_animating) return;
        
        _targetHealth = newHealth;
        Health = newHealth;
        await HealthChanged.InvokeAsync(Health);
        
        if (animate && Math.Abs(_displayHealth - _targetHealth) > 1)
        {
            _animating = true;
            
            try
            {
                // Use JavaScript interop for smooth animation
                await JS.InvokeVoidAsync("animateHearts", 
                    _dotnetRef, 
                    _displayHealth, 
                    _targetHealth);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"JS interop error: {ex.Message}");
                _displayHealth = _targetHealth;
                _animating = false;
                StateHasChanged();
            }
        }
        else
        {
            _displayHealth = _targetHealth;
            StateHasChanged();
        }
    }
    
    [JSInvokable]
    public void UpdateDisplayHealth(int value)
    {
        _displayHealth = value;
        StateHasChanged();
        
        if (_displayHealth == _targetHealth)
        {
            _animating = false;
        }
    }

    private async Task HandleHeartClick(int index)
    {
        // Convert to 1-based for clarity
        int clickedPosition = index + 1;
        
        if (clickedPosition > Health)
        {
            // Clicking above current health (healing)
            await SetHealth(clickedPosition, true);
        }
        else
        {
            // Clicking below current health (damage)
            await SetHealth(clickedPosition - 1, true);
        }
    }

    public void Dispose()
    {
        // Dispose the .NET reference when component is disposed
        _dotnetRef?.Dispose();
    }
}