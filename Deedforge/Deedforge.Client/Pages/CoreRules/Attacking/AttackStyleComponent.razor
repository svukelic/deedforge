@using Deedforge.Domain.CoreRules.Attacking
@using Deedforge.Shared.Compendium
@using Deedforge.Client.Helpers

<MudGrid>
    <MudItem xs="4">
        <MudText Typo="@Typo.h5">
            @AttackStyle.Name @StyleType
        </MudText>
    </MudItem>
    <MudItem xs="8">
        <MudText Typo="@Typo.body2">
            <i>@AttackStyle.Description</i>
        </MudText>
    </MudItem>
    <MudItem xs="12">
        <MudTable Items="@AttacksContext" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
            <HeaderContent>
                <MudTh><MudText Typo="Typo.h6">Name</MudText></MudTh>
                <MudTh><MudText Typo="Typo.h6">Base Form</MudText></MudTh>
                <MudTh><MudText Typo="Typo.h6">Attack Description</MudText></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name"><strong>@context.Item.Name</strong></MudTd>
                <MudTd DataLabel="Form"><MudButton Variant="Variant.Outlined" Size="Size.Small" FullWidth="true" OnClick="@(() => context.ToggleDetails())">@context.Item.BaseForm.Name</MudButton></MudTd>
                <MudTd DataLabel="Description"><i>@context.Item.Description</i></MudTd>
            </RowTemplate>
            <ChildRowContent>
                @if (context.ShowDetails)
                {
                    <MudTr>
                        <td colspan="4">
                            <MudCard Elevation="0">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.body1"><strong>@context.Item.BaseForm.Name</strong> Attack Form</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudText Typo="Typo.body2">@context.Item.BaseForm.Description</MudText>
                                </MudCardContent>
                            </MudCard>
                        </td>
                    </MudTr>
                }
            </ChildRowContent>
        </MudTable>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public required AttacksSheet AttackStyle { get; set; }
    
    public string StyleType { get
        {
            switch (AttackStyle.Type)
            {
                case FormType.Melee:
                    return "Melee Style";
                case FormType.Ranged:
                    return "Ranged Style";
                case FormType.Magic:
                    return "Magic Tradition";
                default:
                    return "n/a";
            }
        } }

    private List<TableChildRowWrapper<Attack>> AttacksContext { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        AttacksContext = new List<TableChildRowWrapper<Attack>>();

        foreach (var attack in AttackStyle.Attacks)
        {
            AttacksContext.Add(new TableChildRowWrapper<Attack>(attack));
        }
    }
}